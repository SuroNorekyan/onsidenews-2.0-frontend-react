Why this is happening

From your backend logs earlier, we know:

The server returns posts as an array ✔️ (we fixed that).

The server should accept a language argument and expose an enum called LanguageCode.

But your running backend may be:

Not on the multilingual branch yet, or not restarted with the new schema, or

Using a slightly different enum or arg name (e.g., Language instead of LanguageCode, or no arg on posts).

When the client asks for a field/arg/type that the server doesn’t have, GraphQL returns 400 (validation error).

Quickest unblock (works even if the arg isn’t deployed)

Your backend already supports Accept-Language fallback. So we can omit the GraphQL language argument entirely and rely on the header (which your Apollo link already sets).

A) Switch to header‑only mode for now

src/graphql/queries.ts

import { gql } from "@apollo/client";

// No language argument
export const POSTS_IN_LANG = gql`
  query Posts {
    posts {
      postId
      servedLanguage
      imageUrl
      isTop
      contentResolved {
        language
        title
        tags
      }
    }
  }
`;

export const POST_IN_LANG = gql`
  query Post($id: Int!) {
    post(id: $id) {
      postId
      servedLanguage
      imageUrl
      isTop
      contentResolved {
        language
        title
        content
        tags
      }
    }
  }
`;


Leave your Apollo link that sets the header (lowercase):

// Accept-Language header already implemented; make sure it's lowercase:
"Accept-Language": currentLang.toLowerCase()  // "en" | "ru" | "hy"


Result: No more enum/arg validation → the server uses the header to serve HY/RU/EN. You should stop seeing 400s immediately if the endpoint is right and CORS allows 3001.

Then make it “perfect” (with the variable) once you confirm the schema

When you’re ready to use the explicit GraphQL variable again, do this two‑step verification:

Confirm the exact enum and arg names on your running backend.

Open http://localhost:3000/graphql and run:

{
  __type(name:"LanguageCode"){ name enumValues{ name } }
}


If it returns null, try Language:

{
  __type(name:"Language"){ name enumValues{ name } }
}


Also check the field args:

{
  __schema {
    queryType {
      fields {
        name
        args { name type { kind name ofType { name } } }
      }
    }
  }
}


Look for posts and see if it lists an arg named language and its type.

Use the correct types/args in the queries:

If the enum is LanguageCode and posts(language: LanguageCode) exists:

export const POSTS_IN_LANG = gql`
  query Posts($language: LanguageCode) {
    posts(language: $language) {
      postId
      servedLanguage
      imageUrl
      isTop
      contentResolved { language title tags }
    }
  }
`;


If the enum is Language instead:

export const POSTS_IN_LANG = gql`
  query Posts($language: Language) {
    posts(language: $language) {
      postId
      servedLanguage
      imageUrl
      isTop
      contentResolved { language title tags }
    }
  }
`;


Until you confirm the schema, header‑only mode is the least brittle and matches your backend’s fallback logic.

Make the errors readable (so 400s show the real message)

In your apolloClient.ts, make sure your error link logs the full GraphQL error message:

import { onError } from "@apollo/client/link/error";

const errorLink = onError(({ graphQLErrors, networkError, operation, forward }) => {
  if (graphQLErrors) {
    for (const err of graphQLErrors) {
      console.error(
        `[GraphQL error] op=${operation.operationName} message=${err.message}`,
        { locations: err.locations, path: err.path, extensions: err.extensions, variables: operation.variables }
      );
    }
  }
  if (networkError) {
    console.error(`[Network error] op=${operation.operationName}`, networkError, { variables: operation.variables });
  }
});


This will show messages like “Unknown argument ‘language’ on field ‘posts’…” or “Unknown type ‘LanguageCode’”, which is exactly what we need to know.

Sanity checks you can run right now

Open the browser console and run these raw fetches (they bypass Apollo and show the exact server message):

A) No-arg list (should succeed if endpoint is correct)

fetch("http://localhost:3000/graphql", {
  method: "POST",
  headers: { "Content-Type": "application/json", "Accept-Language": "en" },
  body: JSON.stringify({
    query: `query { posts { postId servedLanguage contentResolved { language title } } }`
  })
}).then(r=>r.json()).then(console.log)


B) With arg and LanguageCode (only if you think schema has it)

fetch("http://localhost:3000/graphql", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: `
      query($language: LanguageCode){
        posts(language: $language){ postId servedLanguage }
      }`,
    variables: { language: "EN" }
  })
}).then(r=>r.json()).then(console.log)


If A works and B fails with “Unknown type LanguageCode” or “Unknown argument language”, stick to header‑only mode until the backend schema is confirmed/redeployed.

Small gotchas to re‑confirm

Apollo URL must be absolute: httpLink({ uri: "http://localhost:3000/graphql" }).
If it’s relative and your frontend is on 3001, the browser will hit 3001/graphql (404/400).

CORS on backend must allow http://localhost:3001.

Header case: send "Accept-Language": "en" | "ru" | "hy" (lowercase).